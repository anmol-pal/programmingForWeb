/** An error consists of a message and possible options */
type Code = string;
/** If options are specified, then they must have an error 'code'. */
export type ErrOptions = {
    code: Code;
    [opt: string]: string;
};
export declare class Err {
    readonly message: string;
    readonly options?: ErrOptions;
    constructor(message: string, options?: ErrOptions);
}
/** For convenience, an error can be specified using any one of the following:
 *    1.  A string specifying an error message
 *    2.  An Err object
 *    3.  A JS Error object whose .message prop becomes the error message
 *    4.  A JS Object whose .toString() prop becomes the error message
 *
 *  The optional options can be either an error code or a full-fledged
 *  ErrOptions object.
 */
export type ErrSpec = string | Err | Error | Object;
/** factory function to build an Err from different types of args */
export declare function error(e: ErrSpec, options?: ErrOptions | Code): Err;
/** A Result is either a success result identified by isOk=true,
 *  or an error result identified by isOk=false.  A success
 *  result has the success value in its 'val' property; an
 *  error result will have one or more 'Err' objects in its
 *  'errors' property.
 */
export declare class OkResult<T> {
    readonly isOk = true;
    readonly val: T;
    constructor(v: T);
    /** return result of applying fn on val */
    chain<T1>(fn: (v: T) => Result<T1>): Result<T1>;
}
export declare class ErrResult {
    readonly isOk = false;
    readonly errors: Err[];
    constructor(errors?: Err[]);
    addError(e: ErrSpec | ErrResult, options?: Code | ErrOptions): ErrResult;
    /** ignore fn, simply returning this error result */
    chain<T1>(_fn: (v: any) => Result<T1>): Result<T1>;
}
export type Result<T> = OkResult<T> | ErrResult;
/** factory function for a success result */
export declare function okResult<T>(v: T): OkResult<T>;
/** factory function for an error result initialized to contain
 *  a single error as per e, options.
 */
export declare function errResult(e: ErrSpec, options?: Code | ErrOptions): ErrResult;
export {};
//# sourceMappingURL=errors.d.ts.map